/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package MainFiles;

import static MainFiles.IndexPage.employee;
import db.ConnectSql;
import functions.ValidateFields;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ravindu
 */
public class Employee extends javax.swing.JInternalFrame {

    private final String select = "--Select--";
    private final String menuName = "Employee";
    private final String spliter = "--";
    private final DefaultTableModel model_tableViewDetails;
    private final String projectPath = System.getProperty("user.dir");
    String userName, Code, FirstName, LastName, SurName, NameWithIni, ContactLand, ContactMobile, Email, IS_ACTIVE, password = "123", departmentCode, departmentName = "", epfNumber = "", callName, empTypeName, empTypeCode, subDepartmentCode, subDepartmentName;

    public Employee() {
        initComponents();
        model_tableViewDetails = (DefaultTableModel) tableViewDetails.getModel();
        rBtnCode.setSelected(true);
        this.setTitle(menuName);

        loadEmpTypesToCombo();
        loadEmployees();
        loadDepartmentsToCombo();
        loadSubDepartmentsToComboAtStart();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        //        JPanel panel1 = new JPanel() {
            //        @Override
            //        protected void paintComponent(Graphics grphcs) {
                //            super.paintComponent(grphcs);
                //            Color color1 = Color.white;
                //            Color color2 = Color.GREEN;
                //            Graphics2D g2d = (Graphics2D) grphcs;
                //            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                    //                    RenderingHints.VALUE_ANTIALIAS_ON);
                //            GradientPaint gp = new GradientPaint(0, 473,
                    //                    color1.brighter().brighter().brighter(), getWidth(), getHeight(),
                    //                    color2.darker());
                //            g2d.setPaint(gp);
                //            g2d.fillRect(0, 473, getWidth(), getHeight());
                //        }
            //    };
        lbl_category = new javax.swing.JLabel();
        txtStaffMemCode = new javax.swing.JTextField();
        txtFirstName = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lbl_description = new javax.swing.JLabel();
        lbl_subAccount = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        rBtnCode = new javax.swing.JRadioButton();
        rBtnName = new javax.swing.JRadioButton();
        lbl_accountType = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableViewDetails = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        txtSurName = new javax.swing.JTextField();
        txtNameWithIni = new javax.swing.JTextField();
        lbl_accountType2 = new javax.swing.JLabel();
        lbl_accountType3 = new javax.swing.JLabel();
        lbl_accountType4 = new javax.swing.JLabel();
        lbl_accountType5 = new javax.swing.JLabel();
        txtContactLand = new javax.swing.JTextField();
        txtContactMobile = new javax.swing.JTextField();
        txtCallName = new javax.swing.JTextField();
        lbl_accountType6 = new javax.swing.JLabel();
        Fax = new javax.swing.JLabel();
        lbl_description1 = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        comboDepartment = new javax.swing.JComboBox();
        comboSubDepartment = new javax.swing.JComboBox();
        cmbActive = new javax.swing.JComboBox();
        lbl_accountType7 = new javax.swing.JLabel();
        Fax1 = new javax.swing.JLabel();
        comboBoxEmpType = new javax.swing.JComboBox();
        lbl_accountType8 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        lbl_description2 = new javax.swing.JLabel();
        textUserName = new javax.swing.JTextField();

        setIconifiable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_category.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category.setText("Employee code *");
        panel1.add(lbl_category, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 60, 90, 20));

        txtStaffMemCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtStaffMemCodeFocusGained(evt);
            }
        });
        txtStaffMemCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtStaffMemCodeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtStaffMemCodeKeyReleased(evt);
            }
        });
        panel1.add(txtStaffMemCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 60, 120, 20));

        txtFirstName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFirstNameFocusGained(evt);
            }
        });
        txtFirstName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFirstNameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFirstNameKeyReleased(evt);
            }
        });
        panel1.add(txtFirstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 100, 120, 20));

        btnSave.setMnemonic('s');
        btnSave.setText("Save");
        btnSave.setActionCommand("Delete");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        btnSave.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnSaveKeyPressed(evt);
            }
        });
        panel1.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 490, 80, -1));

        btnDelete.setMnemonic('d');
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        btnDelete.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnDeleteKeyPressed(evt);
            }
        });
        panel1.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 490, 80, -1));

        lbl_description.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description.setText("User name *");
        panel1.add(lbl_description, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 60, 60, 20));

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText("Search employee by");
        panel1.add(lbl_subAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 140, 20));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnExitKeyPressed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 490, 80, -1));

        rBtnCode.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnCode);
        rBtnCode.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnCode.setText("Code");
        rBtnCode.setOpaque(false);
        rBtnCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnCodeActionPerformed(evt);
            }
        });
        panel1.add(rBtnCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, 60, -1));

        rBtnName.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnName);
        rBtnName.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnName.setText("Name");
        rBtnName.setOpaque(false);
        rBtnName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnNameActionPerformed(evt);
            }
        });
        rBtnName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rBtnNameKeyPressed(evt);
            }
        });
        panel1.add(rBtnName, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, 60, -1));

        lbl_accountType.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType.setText("Active *");
        panel1.add(lbl_accountType, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 420, 90, 20));

        tableViewDetails.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 153, 0), 1, true));
        tableViewDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee Code", "First Name", "Sub department"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableViewDetails.getTableHeader().setReorderingAllowed(false);
        tableViewDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableViewDetailsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableViewDetails);

        panel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, 450));

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        panel1.add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 20, 170, -1));
        panel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 468, 440, -1));
        panel1.add(txtSurName, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 140, 120, -1));
        panel1.add(txtNameWithIni, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 140, 130, -1));

        lbl_accountType2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType2.setText("Sur name *");
        panel1.add(lbl_accountType2, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 140, 90, 20));

        lbl_accountType3.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType3.setText("Department *");
        panel1.add(lbl_accountType3, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 220, 90, 20));

        lbl_accountType4.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType4.setText("E-mail(@) *");
        panel1.add(lbl_accountType4, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 380, 90, 20));

        lbl_accountType5.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType5.setText("Con. mobile");
        panel1.add(lbl_accountType5, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 340, 70, 20));
        panel1.add(txtContactLand, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 340, 120, -1));
        panel1.add(txtContactMobile, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 340, 130, -1));
        panel1.add(txtCallName, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 180, 120, -1));

        lbl_accountType6.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType6.setText("Call name *");
        panel1.add(lbl_accountType6, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 180, 80, 20));

        Fax.setForeground(new java.awt.Color(102, 102, 102));
        Fax.setText("Type *");
        panel1.add(Fax, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 300, 80, 20));

        lbl_description1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description1.setText("First name *");
        panel1.add(lbl_description1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 100, 90, 20));
        panel1.add(txtLastName, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 100, 130, -1));

        comboDepartment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        comboDepartment.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                comboDepartmentPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        comboDepartment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboDepartmentKeyPressed(evt);
            }
        });
        panel1.add(comboDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 220, 220, -1));

        comboSubDepartment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        panel1.add(comboSubDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 260, 220, -1));

        cmbActive.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Yes", "No" }));
        panel1.add(cmbActive, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 420, 120, -1));

        lbl_accountType7.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType7.setText("Initials *");
        panel1.add(lbl_accountType7, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 140, 60, 20));

        Fax1.setForeground(new java.awt.Color(102, 102, 102));
        Fax1.setText("Sub department *");
        panel1.add(Fax1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 260, 90, 20));

        comboBoxEmpType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        panel1.add(comboBoxEmpType, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 300, 120, -1));

        lbl_accountType8.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType8.setText("Contact land");
        panel1.add(lbl_accountType8, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 340, 90, 20));
        panel1.add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 380, 210, -1));

        lbl_description2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description2.setText("Last name *");
        panel1.add(lbl_description2, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 100, 60, 20));

        textUserName.setToolTipText("User name cannot change after save it.");
        panel1.add(textUserName, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 60, 130, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 968, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadEmpTypesToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select EMPLOYEE_TYPE_CODE, EMPLOYEE_TYPE_NAME From EmployeeTypes order by EMPLOYEE_TYPE_CODE";
            ResultSet rset = stmt.executeQuery(query);

            comboBoxEmpType.removeAllItems();
            comboBoxEmpType.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    comboBoxEmpType.insertItemAt(rset.getString("EMPLOYEE_TYPE_CODE") + spliter + rset.getString("EMPLOYEE_TYPE_NAME"), position); // 
                    position++;
                } while (rset.next());
            }
            comboBoxEmpType.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", ERROR);
        }
    }

    private void loadDepartmentsToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select DepartmentCode, DepartmentName From Departments order by DepartmentName";
            ResultSet rset = stmt.executeQuery(query);

            comboDepartment.removeAllItems();
            comboDepartment.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    comboDepartment.insertItemAt(rset.getString("DepartmentName") + spliter + rset.getString("DepartmentCode"), position); // 
                    position++;
                } while (rset.next());
            }
            comboDepartment.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", ERROR);
        }
    }

    private void loadSubDepartmentsToCombo() {
        try {
            String departmentCodeByArray[] = comboDepartment.getSelectedItem().toString().split(spliter);
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select SUB_DEPARTMENT_CODE, SUB_DEPARTMENT_NAME From SubDepartments WHERE DepartmentCode = '" + departmentCodeByArray[1] + "' order by SUB_DEPARTMENT_NAME";
            ResultSet rset = stmt.executeQuery(query);

            comboSubDepartment.removeAllItems();
            comboSubDepartment.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    comboSubDepartment.insertItemAt(rset.getString("SUB_DEPARTMENT_NAME") + spliter + rset.getString("SUB_DEPARTMENT_CODE"), position); // 
                    position++;
                } while (rset.next());
            }
            comboSubDepartment.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", ERROR);
        }
    }

    private void loadSubDepartmentsToComboAtStart() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select SUB_DEPARTMENT_CODE, SUB_DEPARTMENT_NAME From SubDepartments order by SUB_DEPARTMENT_NAME";
            ResultSet rset = stmt.executeQuery(query);

            comboSubDepartment.removeAllItems();
            comboSubDepartment.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    comboSubDepartment.insertItemAt(rset.getString("SUB_DEPARTMENT_NAME") + spliter + rset.getString("SUB_DEPARTMENT_CODE"), position); // 
                    position++;
                } while (rset.next());
            }
            comboSubDepartment.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", ERROR);
        }
    }

    private void txtStaffMemCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtStaffMemCodeFocusGained
        txtStaffMemCode.selectAll();
    }//GEN-LAST:event_txtStaffMemCodeFocusGained

    private void txtStaffMemCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStaffMemCodeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String text = txtStaffMemCode.getText();
            if (!text.isEmpty()) {
                txtFirstName.requestFocus();
            }
        }
    }//GEN-LAST:event_txtStaffMemCodeKeyPressed

    private void txtStaffMemCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStaffMemCodeKeyReleased
        ValidateFields.CheckForCodes(txtStaffMemCode);
    }//GEN-LAST:event_txtStaffMemCodeKeyReleased

    private void txtFirstNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFirstNameFocusGained
        txtFirstName.selectAll();
    }//GEN-LAST:event_txtFirstNameFocusGained

    private void txtFirstNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFirstNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String text = txtFirstName.getText();
            if (!text.isEmpty()) {
                txtSurName.requestFocus();
            }
        }
    }//GEN-LAST:event_txtFirstNameKeyPressed

    private void txtFirstNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFirstNameKeyReleased
        ValidateFields.CheckForOtherFields(txtFirstName);
    }//GEN-LAST:event_txtFirstNameKeyReleased

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        CheckBeforeSave();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnSaveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnSaveKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            CheckBeforeSave();
        }
    }//GEN-LAST:event_btnSaveKeyPressed

    private void CheckBeforeSave() {
        Code = txtStaffMemCode.getText().toUpperCase();
        userName = textUserName.getText();
        FirstName = txtFirstName.getText();
        LastName = txtLastName.getText();
        SurName = txtSurName.getText();
        NameWithIni = txtNameWithIni.getText();
        callName = txtCallName.getText();
//        String department[] = comboDepartment.getSelectedItem().toString().split(spliter);
        String checkDepartment = comboDepartment.getSelectedItem().toString();
        String subDepartment[] = comboSubDepartment.getSelectedItem().toString().split(spliter);
        String checkSubDepartment = comboSubDepartment.getSelectedItem().toString();
        String empType[] = comboBoxEmpType.getSelectedItem().toString().split(spliter);
        String checkEmpType = comboBoxEmpType.getSelectedItem().toString();
        Email = txtEmail.getText();
        ContactLand = txtContactLand.getText();
        ContactMobile = txtContactMobile.getText();
        IS_ACTIVE = cmbActive.getSelectedItem().toString();

        if (!Code.isEmpty() && !FirstName.isEmpty() && !SurName.isEmpty() && !Email.isEmpty() && !checkDepartment.equals(select) && !checkSubDepartment.equals(select) && !checkEmpType.equals(select)) {
            try {
                java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                java.sql.Statement stmtForUserLogin = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                String query = "select EMPLOYEE_CODE From Employees where EMPLOYEE_CODE = '" + Code + "'";
                ResultSet rset = stmt.executeQuery(query);

                if (rset.next()) {
                    int x = JOptionPane.showConfirmDialog(this, "Are you sure to change the '" + Code + "' '" + menuName + "' details?", "Update '" + menuName + "'?", JOptionPane.YES_NO_OPTION);
                    if (x == JOptionPane.YES_OPTION) {
                        String UpdateQuery = "UPDATE Employees\n"
                                + "   SET \n"
                                + "      EPF_NO = '" + epfNumber + "'\n"
                                + "      ,FIRST_NAME = '" + FirstName + "'\n"
                                + "      ,LAST_NAME = '" + LastName + "'\n"
                                + "      ,SUR_NAME = '" + SurName + "'\n"
                                + "      ,INITIALS = '" + NameWithIni + "'\n"
                                + "      ,CALL_NAME = '" + callName + "'\n"
                                //                                + "      ,DepartmentCode = '" + department[1] + "'\n"
                                + "      ,SUB_DEPARTMENT_CODE = '" + subDepartment[1] + "'\n"
                                + "      ,EMPLOYEE_TYPE_CODE = '" + empType[0] + "'\n"
                                + "      ,CONTACT_LAND = '" + ContactLand + "'\n"
                                + "      ,CONTACT_MOBILE = '" + ContactMobile + "'\n"
                                + "      ,EMAIL = '" + Email + "'\n"
                                + "      ,ACTIVE = '" + IS_ACTIVE + "'\n"
                                + " WHERE EMPLOYEE_CODE = '" + Code + "'";
                        stmt.execute(UpdateQuery);
                        JOptionPane.showMessageDialog(this, "'" + menuName + "' details are updated.");
                        Refresh();
                    } else if (x == JOptionPane.NO_OPTION) {
                        txtStaffMemCode.requestFocus();
                    }

                } else if (!rset.next()) {
                    String UpdateQuery = "INSERT INTO Employees\n"
                            + "           (EMPLOYEE_CODE\n"
                            + "           ,EPF_NO\n"
                            + "           ,FIRST_NAME\n"
                            + "           ,LAST_NAME\n"
                            + "           ,SUR_NAME\n"
                            + "           ,INITIALS\n"
                            + "           ,CALL_NAME\n"
                            + "           ,SUB_DEPARTMENT_CODE\n"
                            + "           ,EMPLOYEE_TYPE_CODE\n"
                            + "           ,CONTACT_LAND\n"
                            + "           ,CONTACT_MOBILE\n"
                            + "           ,EMAIL\n"
                            + "           ,ACTIVE)\n"
                            + "     VALUES\n"
                            + "           ('" + Code + "'\n"
                            + "           ,'" + epfNumber + "'\n"
                            + "           ,'" + FirstName + "'\n"
                            + "           ,'" + LastName + "'\n"
                            + "           ,'" + SurName + "'\n"
                            + "           ,'" + NameWithIni + "'\n"
                            + "           ,'" + callName + "'\n"
                            + "           ,'" + subDepartment[1] + "'\n"
                            + "           ,'" + empType[0] + "'\n"
                            + "           ,'" + ContactLand + "'\n"
                            + "           ,'" + ContactMobile + "'\n"
                            + "           ,'" + Email + "'\n"
                            + "           ,'" + IS_ACTIVE + "')";
                    stmt.execute(UpdateQuery);

                    String queryToUserLogin = "INSERT INTO UnAndPw\n"
                            + "(EMPLOYEE_CODE,\n"
                            + "USER_NAME,\n"
                            + "USER_PASSWORD,\n"
                            + "USER_OLD_PASSWORD)\n"
                            + "VALUES\n"
                            + "(\n"
                            + "'" + Code + "',\n"
                            + "'" + userName + "',\n"
                            + "'" + password + "',\n"
                            + "'" + password + "')";
                    stmtForUserLogin.execute(queryToUserLogin);
                    JOptionPane.showMessageDialog(this, "New '" + menuName + "' is saved.");
                    Refresh();
                }
                rset.close();
            } catch (HeadlessException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        } else if (Code.isEmpty() || FirstName.isEmpty() || SurName.isEmpty() || Email.isEmpty() || checkDepartment.equals(select) || checkEmpType.equals(select)) {
            JOptionPane.showMessageDialog(this, "Please fill all fields before save.", "Empty fields", JOptionPane.OK_OPTION);
            txtStaffMemCode.requestFocus();
        }
    }

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        CheckBeforeDelete();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnDeleteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnDeleteKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            CheckBeforeDelete();
        }
    }//GEN-LAST:event_btnDeleteKeyPressed

    private void CheckBeforeDelete() {
        Code = txtStaffMemCode.getText();
        if (!Code.isEmpty()) {
            try {
                java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                String query = "select MEMBER_ID From staff_members where MEMBER_ID = '" + Code + "'";
                ResultSet rset = stmt.executeQuery(query);

                if (rset.next()) {
                    Delete();
                } else if (!rset.next()) {
                    JOptionPane.showMessageDialog(this, "Invalid staff members code. Please insert a valid staff members code.", "Invalid staff members code", JOptionPane.OK_OPTION);
                    txtStaffMemCode.requestFocus();
                }

            } catch (HeadlessException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        } else if (Code.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please insert a valid staff members code before delete.", "Empty staff members code", JOptionPane.OK_OPTION);
            txtStaffMemCode.requestFocus();
        }
    }

    private void Delete() {
        Code = txtStaffMemCode.getText();
        int x = JOptionPane.showConfirmDialog(this, "Are you sure To delete this?", "Delete staff members?", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            try {
                java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                String query = "delete From staff_members where MEMBER_ID = '" + Code + "'";
                stmt.execute(query);
                JOptionPane.showMessageDialog(this, "Staff members is deleted.");
                Refresh();
            } catch (HeadlessException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }

        } else if (x == JOptionPane.NO_OPTION) {
            txtStaffMemCode.requestFocus();
        }
    }

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        exit();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnExitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            exit();
        }
    }//GEN-LAST:event_btnExitKeyPressed

    private void exit() {
        if (employee != null) {
            employee = null;
        }
        this.dispose();
    }

    private void rBtnCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnCodeActionPerformed
        if (rBtnCode.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnCodeActionPerformed

    private void rBtnNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnNameActionPerformed
        if (rBtnName.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnNameActionPerformed

    private void rBtnNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rBtnNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            rBtnCode.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            rBtnName.setSelected(true);
            btnSave.requestFocus();
        }
    }//GEN-LAST:event_rBtnNameKeyPressed

    private void tableViewDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableViewDetailsMouseClicked
        Code = tableViewDetails.getValueAt(tableViewDetails.getSelectedRow(), 0).toString();
        FirstName = tableViewDetails.getValueAt(tableViewDetails.getSelectedRow(), 1).toString();
        subDepartmentCode = tableViewDetails.getValueAt(tableViewDetails.getSelectedRow(), 2).toString();
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            query = "SELECT\n"
                    + "     Employees.\"FIRST_NAME\" AS Employees_FIRST_NAME,\n"
                    + "     Employees.\"CALL_NAME\" AS Employees_CALL_NAME,\n"
                    + "     Employees.\"INITIALS\" AS Employees_INITIALS,\n"
                    + "     UnAndPw.\"USER_NAME\" AS UnAndPw_USER_NAME,\n"
                    + "     Employees.\"ACTIVE\" AS Employees_ACTIVE,\n"
                    + "     Employees.\"EMPLOYEE_CODE\" AS Employees_EMPLOYEE_CODE,\n"
                    + "     Employees.\"EPF_NO\" AS Employees_EPF_NO,\n"
                    + "     Employees.\"LAST_NAME\" AS Employees_LAST_NAME,\n"
                    + "     Employees.\"SUR_NAME\" AS Employees_SUR_NAME,\n"
                    + "     Employees.\"SUB_DEPARTMENT_CODE\" AS Employees_SUB_DEPARTMENT_CODE,\n"
                    + "     Employees.\"EMPLOYEE_TYPE_CODE\" AS Employees_EMPLOYEE_TYPE_CODE,\n"
                    + "     Employees.\"CONTACT_LAND\" AS Employees_CONTACT_LAND,\n"
                    + "     Employees.\"CONTACT_MOBILE\" AS Employees_CONTACT_MOBILE,\n"
                    + "     Employees.\"EMAIL\" AS Employees_EMAIL,\n"
                    + "     SubDepartments.\"SUB_DEPARTMENT_NAME\" AS SubDepartments_SUB_DEPARTMENT_NAME,\n"
                    + "     SubDepartments.\"DepartmentCode\" AS SubDepartments_DepartmentCode,\n"
                    + "     Departments.\"DepartmentName\" AS Departments_DepartmentName,\n"
                    + "     EmployeeTypes.\"EMPLOYEE_TYPE_CODE\" AS EmployeeTypes_EMPLOYEE_TYPE_CODE,\n"
                    + "     EmployeeTypes.\"EMPLOYEE_TYPE_NAME\" AS EmployeeTypes_EMPLOYEE_TYPE_NAME,\n"
                    + "     EmployeeTypes.\"SERVICE_DURATION\" AS EmployeeTypes_SERVICE_DURATION\n"
                    + "FROM\n"
                    + "     \"dbo\".\"UnAndPw\" UnAndPw INNER JOIN \"dbo\".\"Employees\" Employees ON UnAndPw.\"EMPLOYEE_CODE\" = Employees.\"EMPLOYEE_CODE\"\n"
                    + "     INNER JOIN \"dbo\".\"SubDepartments\" SubDepartments ON Employees.\"SUB_DEPARTMENT_CODE\" = SubDepartments.\"SUB_DEPARTMENT_CODE\"\n"
                    + "     INNER JOIN \"dbo\".\"EmployeeTypes\" EmployeeTypes ON Employees.\"EMPLOYEE_TYPE_CODE\" = EmployeeTypes.\"EMPLOYEE_TYPE_CODE\"\n"
                    + "     INNER JOIN \"dbo\".\"Departments\" Departments ON SubDepartments.\"DepartmentCode\" = Departments.\"DepartmentCode\"\n"
                    + "WHERE\n"
                    + "     Employees.\"EMPLOYEE_CODE\" = '" + Code + "'\n"
                    + "ORDER BY\n"
                    + "     Employees.\"EMPLOYEE_CODE\" ASC";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            if (reset.next()) {
                userName = reset.getString("UnAndPw_USER_NAME");
                LastName = reset.getString("Employees_LAST_NAME");
                SurName = reset.getString("Employees_SUR_NAME");
                NameWithIni = reset.getString("Employees_INITIALS");
                callName = reset.getString("Employees_CALL_NAME");
                subDepartmentName = reset.getString("SubDepartments_SUB_DEPARTMENT_NAME");
                departmentCode = reset.getString("SubDepartments_DepartmentCode");
                departmentName = reset.getString("Departments_DepartmentName");
                empTypeCode = reset.getString("EmployeeTypes_EMPLOYEE_TYPE_CODE");
                empTypeName = reset.getString("EmployeeTypes_EMPLOYEE_TYPE_NAME");
                Email = reset.getString("Employees_EMAIL");
                ContactLand = reset.getString("Employees_CONTACT_LAND");
                ContactMobile = reset.getString("Employees_CONTACT_MOBILE");
                IS_ACTIVE = reset.getString("Employees_ACTIVE");

            }
            textUserName.setText(userName);
            txtStaffMemCode.setText(Code);
            txtFirstName.setText(FirstName);
            txtLastName.setText(LastName);
            txtSurName.setText(SurName);
            txtNameWithIni.setText(NameWithIni);
            txtCallName.setText(callName);
            comboBoxEmpType.setSelectedItem(empTypeCode + "--" + empTypeName);
            txtContactLand.setText(ContactLand);
            txtContactMobile.setText(ContactMobile);
            txtEmail.setText(Email);
            cmbActive.setSelectedItem(IS_ACTIVE);
            comboSubDepartment.setSelectedItem(subDepartmentName + "--" + subDepartmentCode);
            comboDepartment.setSelectedItem(departmentName + "--" + departmentCode);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }//GEN-LAST:event_tableViewDetailsMouseClicked

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        if (rBtnCode.isSelected()) {
            SearchStaffMembersByCode(txtSearch.getText());
        } else if (rBtnName.isSelected()) {
            SearchStaffMembersByName(txtSearch.getText());
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void SearchStaffMembersByCode(String CategoryCode) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            model_tableViewDetails.setRowCount(0);

            if (!CategoryCode.equals("")) {
                query = "SELECT EMPLOYEE_CODE, FIRST_NAME, SUB_DEPARTMENT_CODE FROM Employees WHERE EMPLOYEE_CODE LIKE '" + CategoryCode + "%'";
            } else {
                query = "SELECT EMPLOYEE_CODE, FIRST_NAME, SUB_DEPARTMENT_CODE FROM Employees WHERE EMPLOYEE_CODE LIKE '" + CategoryCode + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {

                model_tableViewDetails.addRow(new Object[model_tableViewDetails.getColumnCount()]);
                tableViewDetails.setValueAt(reset.getString("EMPLOYEE_CODE"), rowCount, 0);
                tableViewDetails.setValueAt(reset.getString("FIRST_NAME"), rowCount, 1);
                tableViewDetails.setValueAt(reset.getString("SUB_DEPARTMENT_CODE"), rowCount, 2);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchStaffMembersByName(String CategoryName) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            model_tableViewDetails.setRowCount(0);

            if (!CategoryName.equals("")) {
                query = "SELECT EMPLOYEE_CODE, FIRST_NAME, SUB_DEPARTMENT_CODE FROM Employees WHERE FIRST_NAME LIKE '" + CategoryName + "%'";
            } else {
                query = "SELECT EMPLOYEE_CODE, FIRST_NAME, SUB_DEPARTMENT_CODE FROM Employees WHERE FIRST_NAME LIKE '" + CategoryName + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_tableViewDetails.addRow(new Object[model_tableViewDetails.getColumnCount()]);
                tableViewDetails.setValueAt(reset.getString("EMPLOYEE_CODE"), rowCount, 0);
                tableViewDetails.setValueAt(reset.getString("FIRST_NAME"), rowCount, 1);
                tableViewDetails.setValueAt(reset.getString("SUB_DEPARTMENT_CODE"), rowCount, 2);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void Refresh() {
        model_tableViewDetails.setRowCount(0);
        txtStaffMemCode.setText("");
        textUserName.setText("");
        txtFirstName.setText("");
        txtLastName.setText("");
        txtSurName.setText("");
        txtNameWithIni.setText("");
        txtContactLand.setText("");
        txtContactMobile.setText("");
        txtEmail.setText("");
        txtCallName.setText("");
        txtSearch.setText("");
        comboBoxEmpType.setSelectedIndex(0);
        cmbActive.setSelectedIndex(0);
        comboDepartment.setSelectedIndex(0);
        comboSubDepartment.setSelectedIndex(0);
        loadEmployees();
    }

    private void loadEmployees() {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            query = "SELECT EMPLOYEE_CODE, FIRST_NAME, SUB_DEPARTMENT_CODE FROM Employees ORDER BY EMPLOYEE_CODE";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_tableViewDetails.addRow(new Object[model_tableViewDetails.getColumnCount()]);
                tableViewDetails.setValueAt(reset.getString("EMPLOYEE_CODE"), rowCount, 0);
                tableViewDetails.setValueAt(reset.getString("FIRST_NAME"), rowCount, 1);
                tableViewDetails.setValueAt(reset.getString("SUB_DEPARTMENT_CODE"), rowCount, 2);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
//        int x = evt.getX();
//        int y = evt.getY();
//        System.out.println(x + "," + y);
    }//GEN-LAST:event_panel1MouseClicked

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        employee.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    private void comboDepartmentPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboDepartmentPopupMenuWillBecomeInvisible
        String text = comboDepartment.getSelectedItem().toString();
        if (!text.equals(select)) {
            loadSubDepartmentsToCombo();
            btnSave.requestFocus();
        }
    }//GEN-LAST:event_comboDepartmentPopupMenuWillBecomeInvisible

    private void comboDepartmentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboDepartmentKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String text = comboDepartment.getSelectedItem().toString();
            if (!text.equals(select)) {
                loadSubDepartmentsToCombo();
                btnSave.requestFocus();
            }
        }
    }//GEN-LAST:event_comboDepartmentKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Fax;
    private javax.swing.JLabel Fax1;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnSave;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbActive;
    private javax.swing.JComboBox comboBoxEmpType;
    private javax.swing.JComboBox comboDepartment;
    private javax.swing.JComboBox comboSubDepartment;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lbl_accountType;
    private javax.swing.JLabel lbl_accountType2;
    private javax.swing.JLabel lbl_accountType3;
    private javax.swing.JLabel lbl_accountType4;
    private javax.swing.JLabel lbl_accountType5;
    private javax.swing.JLabel lbl_accountType6;
    private javax.swing.JLabel lbl_accountType7;
    private javax.swing.JLabel lbl_accountType8;
    private javax.swing.JLabel lbl_category;
    private javax.swing.JLabel lbl_description;
    private javax.swing.JLabel lbl_description1;
    private javax.swing.JLabel lbl_description2;
    private javax.swing.JLabel lbl_subAccount;
    private javax.swing.JPanel panel1;
    private javax.swing.JRadioButton rBtnCode;
    private javax.swing.JRadioButton rBtnName;
    private javax.swing.JTable tableViewDetails;
    private javax.swing.JTextField textUserName;
    private javax.swing.JTextField txtCallName;
    private javax.swing.JTextField txtContactLand;
    private javax.swing.JTextField txtContactMobile;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtNameWithIni;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtStaffMemCode;
    private javax.swing.JTextField txtSurName;
    // End of variables declaration//GEN-END:variables

}
