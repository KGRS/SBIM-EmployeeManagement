/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Transactions;

import static MainFiles.IndexPage.allocateStudentsForEventGroup;
import db.ConnectSql;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;


public class EmployeeTree extends javax.swing.JInternalFrame {

    private final String select = "--Select--";
    private final DefaultTableModel model_tableRankedEmployee, model_tableDesignationRank;
    private final DefaultTableModel model_TableEmployee;
    private final String spliter = "--";
    private final String menuName = "Employee tree";
    String departmentCode, subDepartmentCode, rankForGenerate, designationCode, designationName, empCode, empFirstName, empCallingName;
    int rank, rowCountOfTableEmployee, rowCountOfTableDesignationRank, rowCountOfTableRankedEmployee, selectedRowOfTableEmployee, selectedRowOfTableDesignationRank, selectedRowOfTableRankedEmployee;

    public EmployeeTree() {
        initComponents();
        loadDepartmentsToCombo();

        comboDepartment.requestFocus();
        model_tableRankedEmployee = (DefaultTableModel) tableRankedEmployee.getModel();
        model_TableEmployee = (DefaultTableModel) tableEmployee.getModel();
        model_tableDesignationRank = (DefaultTableModel) tableDesignationRank.getModel();
        panel1.setToolTipText("Press right mouse click to refresh.");
        this.setTitle(menuName);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        lbl_accountType1 = new javax.swing.JLabel();
        buttonView = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableEmployee = new javax.swing.JTable();
        comboDepartment = new javax.swing.JComboBox();
        lbl_subAccount = new javax.swing.JLabel();
        ButtonAddSelected = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableRankedEmployee = new javax.swing.JTable();
        ButtonRemoveSelected = new javax.swing.JButton();
        lbl_subAccount1 = new javax.swing.JLabel();
        lbl_subAccount2 = new javax.swing.JLabel();
        TextNumberOfEmpRanked = new javax.swing.JTextField();
        TextNumberOfEmpAtSubDepartment = new javax.swing.JTextField();
        comboSubDepartment = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableDesignationRank = new javax.swing.JTable();

        setIconifiable(true);
        setPreferredSize(new java.awt.Dimension(990, 679));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.setPreferredSize(new java.awt.Dimension(950, 688));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_accountType1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType1.setText("Department *");
        panel1.add(lbl_accountType1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 80, 20));

        buttonView.setText("View");
        buttonView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonViewActionPerformed(evt);
            }
        });
        panel1.add(buttonView, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 20, 90, 20));

        btnSave.setMnemonic('s');
        btnSave.setText("Save");
        btnSave.setActionCommand("Delete");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        panel1.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 610, 80, -1));

        btnRefresh.setMnemonic('d');
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        panel1.add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 610, 80, -1));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnExitKeyPressed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 610, 80, -1));

        tableEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee code", "First name", "Name with initials", "Calling name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableEmployee.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableEmployee);
        if (tableEmployee.getColumnModel().getColumnCount() > 0) {
            tableEmployee.getColumnModel().getColumn(1).setPreferredWidth(100);
            tableEmployee.getColumnModel().getColumn(2).setPreferredWidth(200);
            tableEmployee.getColumnModel().getColumn(3).setPreferredWidth(100);
        }

        panel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 510, 230));

        comboDepartment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        comboDepartment.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                comboDepartmentPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        comboDepartment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboDepartmentKeyPressed(evt);
            }
        });
        panel1.add(comboDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 250, 20));

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText("Number of employees at selected sub department");
        panel1.add(lbl_subAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 250, 20));

        ButtonAddSelected.setText("Add selected");
        ButtonAddSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddSelectedActionPerformed(evt);
            }
        });
        panel1.add(ButtonAddSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 320, 130, -1));

        tableRankedEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rank code", "Designation code", "Designation name", "Employee code", "First name", "Calling name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableRankedEmployee.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tableRankedEmployee);
        if (tableRankedEmployee.getColumnModel().getColumnCount() > 0) {
            tableRankedEmployee.getColumnModel().getColumn(4).setPreferredWidth(130);
            tableRankedEmployee.getColumnModel().getColumn(5).setPreferredWidth(130);
        }

        panel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 357, 930, 230));

        ButtonRemoveSelected.setText("Remove selected");
        ButtonRemoveSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRemoveSelectedActionPerformed(evt);
            }
        });
        panel1.add(ButtonRemoveSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 320, 120, -1));

        lbl_subAccount1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount1.setText("Sub department *");
        panel1.add(lbl_subAccount1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 20, 100, 20));

        lbl_subAccount2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount2.setText("Number of employees who given rank code");
        panel1.add(lbl_subAccount2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 610, 220, 20));

        TextNumberOfEmpRanked.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TextNumberOfEmpRanked.setEnabled(false);
        panel1.add(TextNumberOfEmpRanked, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 610, 70, -1));

        TextNumberOfEmpAtSubDepartment.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TextNumberOfEmpAtSubDepartment.setEnabled(false);
        panel1.add(TextNumberOfEmpAtSubDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 320, 70, -1));

        comboSubDepartment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        panel1.add(comboSubDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 20, 240, -1));

        tableDesignationRank.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rank code", "Designation code", "Designation name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableDesignationRank.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tableDesignationRank);

        panel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(552, 70, 400, 230));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 973, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 649, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadDepartmentsToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select DepartmentCode, DepartmentName From Departments order by DepartmentName";
            ResultSet rset = stmt.executeQuery(query);

            comboDepartment.removeAllItems();
            comboDepartment.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    comboDepartment.insertItemAt(rset.getString("DepartmentName") + "--" + rset.getString("DepartmentCode"), position); // 
                    position++;
                } while (rset.next());
            }
            comboDepartment.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", ERROR);
        }
    }

    private void loadSubDepartmentsToCombo() {
        try {
            String departmentCodeByArray[] = comboDepartment.getSelectedItem().toString().split(spliter);
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select SUB_DEPARTMENT_CODE, SUB_DEPARTMENT_NAME From SubDepartments WHERE DepartmentCode = '" + departmentCodeByArray[1] + "' order by SUB_DEPARTMENT_NAME";
            ResultSet rset = stmt.executeQuery(query);

            comboSubDepartment.removeAllItems();
            comboSubDepartment.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    comboSubDepartment.insertItemAt(rset.getString("SUB_DEPARTMENT_NAME") + "--" + rset.getString("SUB_DEPARTMENT_CODE"), position); // 
                    position++;
                } while (rset.next());
            }
            comboSubDepartment.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", ERROR);
        }
    }

    private void loadSelectedSubDepartmentEmployeesToTable(String subDepartmentCode) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshEmployeeTable();

            query = "SELECT [EMPLOYEE_CODE]\n"
                    + "      ,[EPF_NO]\n"
                    + "      ,[FIRST_NAME]\n"
                    + "      ,[LAST_NAME]\n"
                    + "      ,[SUR_NAME]\n"
                    + "      ,[INITIALS]\n"
                    + "      ,[CALL_NAME]\n"
                    + "      ,[DepartmentCode]\n"
                    + "      ,[SUB_DEPARTMENT_CODE]\n"
                    + "      ,[EMPLOYEE_TYPE_CODE]\n"
                    + "      ,[CONTACT_LAND]\n"
                    + "      ,[CONTACT_MOBILE]\n"
                    + "      ,[EMAIL]\n"
                    + "      ,[ACTIVE]\n"
                    + "  FROM [Employees] WHERE SUB_DEPARTMENT_CODE = '" + subDepartmentCode + "' ORDER BY FIRST_NAME";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_TableEmployee.addRow(new Object[model_TableEmployee.getColumnCount()]);
                tableEmployee.setValueAt(reset.getString("EMPLOYEE_CODE"), rowCount, 0);
                tableEmployee.setValueAt(reset.getString("FIRST_NAME"), rowCount, 1);
                tableEmployee.setValueAt(reset.getString("INITIALS"), rowCount, 2);
                tableEmployee.setValueAt(reset.getString("CALL_NAME"), rowCount, 3);
                rowCount++;
            }
            TextNumberOfEmpAtSubDepartment.setText(String.valueOf(rowCount));
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void RefreshEmployeeTable() {
        try {
            int row = model_TableEmployee.getRowCount();
            for (int j = 0; j < row; j++) {
                model_TableEmployee.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void comboDepartmentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboDepartmentKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String text = comboDepartment.getSelectedItem().toString();
            if (!text.equals(select)) {
                loadSubDepartmentsToCombo();
                btnSave.requestFocus();
            }
        }
    }//GEN-LAST:event_comboDepartmentKeyPressed

    private void comboDepartmentPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboDepartmentPopupMenuWillBecomeInvisible
        String text = comboDepartment.getSelectedItem().toString();
        if (!text.equals(select)) {
            loadSubDepartmentsToCombo();
            btnSave.requestFocus();
        }
    }//GEN-LAST:event_comboDepartmentPopupMenuWillBecomeInvisible

    private void btnExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnExitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            exit();
        }
    }//GEN-LAST:event_btnExitKeyPressed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        exit();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        Refresh();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        CheckBeforeSave();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void buttonViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonViewActionPerformed
        subDepartmentCode = comboSubDepartment.getSelectedItem().toString();
        if (!subDepartmentCode.equals(select)) {
            String subDepartmentCodeByArray[] = comboSubDepartment.getSelectedItem().toString().split(spliter);
            loadSelectedSubDepartmentEmployeesToTable(subDepartmentCodeByArray[1]);
            LoadDesignationRanks(subDepartmentCodeByArray[1]);
            LoadEmployeeRanks();
        } else if (subDepartmentCode.equals(select)) {
            JOptionPane.showMessageDialog(this, "Sub department is not selected.", "Not selected", JOptionPane.OK_OPTION);
            comboSubDepartment.requestFocus();
        }
    }//GEN-LAST:event_buttonViewActionPerformed

    private void LoadDesignationRanks(String subDepartmentCodeByArray) {
        try {
            RefreshDesignationRankTable();
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            query = "SELECT\n"
                    + "     EmployeeDesignationTree.\"RANK_CODE\" AS EmployeeDesignationTree_RANK_CODE,\n"
                    + "     EmployeeDesignationTree.\"RANK_LEVEL\" AS EmployeeDesignationTree_RANK_LEVEL,\n"
                    + "     EmployeeDesignationTree.\"EMPLOYEE_DESIGNATION_CODE\" AS EmployeeDesignationTree_EMPLOYEE_DESIGNATION_CODE,\n"
                    + "     EmployeeDesignationTree.\"SUB_DEPARTMENT_CODE\" AS EmployeeDesignationTree_SUB_DEPARTMENT_CODE,\n"
                    + "     EmployeeDesignation.\"EMPLOYEE_DESIGNATION_NAME\" AS EmployeeDesignation_EMPLOYEE_DESIGNATION_NAME,\n"
                    + "     SubDepartments.\"SUB_DEPARTMENT_NAME\" AS SubDepartments_SUB_DEPARTMENT_NAME,\n"
                    + "     Departments.\"DepartmentName\" AS Departments_DepartmentName\n"
                    + "FROM\n"
                    + "     \"dbo\".\"EmployeeDesignation\" EmployeeDesignation INNER JOIN \"dbo\".\"EmployeeDesignationTree\" EmployeeDesignationTree ON EmployeeDesignation.\"EMPLOYEE_DESIGNATION_CODE\" = EmployeeDesignationTree.\"EMPLOYEE_DESIGNATION_CODE\"\n"
                    + "     INNER JOIN \"dbo\".\"SubDepartments\" SubDepartments ON EmployeeDesignationTree.\"SUB_DEPARTMENT_CODE\" = SubDepartments.\"SUB_DEPARTMENT_CODE\"\n"
                    + "     INNER JOIN \"dbo\".\"Departments\" Departments ON SubDepartments.\"DepartmentCode\" = Departments.\"DepartmentCode\" WHERE EmployeeDesignationTree.\"SUB_DEPARTMENT_CODE\" = '" + subDepartmentCodeByArray + "' ORDER BY EmployeeDesignation.\"EMPLOYEE_DESIGNATION_NAME\"";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_tableDesignationRank.addRow(new Object[model_tableDesignationRank.getColumnCount()]);
                tableDesignationRank.setValueAt(reset.getString("EmployeeDesignationTree_RANK_CODE"), rowCount, 0);
                tableDesignationRank.setValueAt(reset.getString("EmployeeDesignationTree_EMPLOYEE_DESIGNATION_CODE"), rowCount, 1);
                tableDesignationRank.setValueAt(reset.getString("EmployeeDesignation_EMPLOYEE_DESIGNATION_NAME"), rowCount, 2);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void LoadEmployeeRanks() {
        try {
            model_tableRankedEmployee.setRowCount(0);
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            query = "SELECT\n"
                    + "     EmployeeDesignationTree.\"EMPLOYEE_DESIGNATION_CODE\" AS EmployeeDesignationTree_EMPLOYEE_DESIGNATION_CODE,\n"
                    + "     EmployeeDesignation.\"EMPLOYEE_DESIGNATION_NAME\" AS EmployeeDesignation_EMPLOYEE_DESIGNATION_NAME,\n"
                    + "     EmployeeTree.\"EMPLOYEE_CODE\" AS EmployeeTree_EMPLOYEE_CODE,\n"
                    + "     EmployeeTree.\"RANK_CODE\" AS EmployeeTree_RANK_CODE,\n"
                    + "     Employees.\"FIRST_NAME\" AS Employees_FIRST_NAME,\n"
                    + "     Employees.\"CALL_NAME\" AS Employees_CALL_NAME\n"
                    + "FROM\n"
                    + "     \"dbo\".\"EmployeeDesignation\" EmployeeDesignation INNER JOIN \"dbo\".\"EmployeeDesignationTree\" EmployeeDesignationTree ON EmployeeDesignation.\"EMPLOYEE_DESIGNATION_CODE\" = EmployeeDesignationTree.\"EMPLOYEE_DESIGNATION_CODE\"\n"
                    + "     INNER JOIN \"dbo\".\"EmployeeTree\" EmployeeTree ON EmployeeDesignationTree.\"RANK_CODE\" = EmployeeTree.\"RANK_CODE\"\n"
                    + "     INNER JOIN \"dbo\".\"Employees\" Employees ON EmployeeTree.\"EMPLOYEE_CODE\" = Employees.\"EMPLOYEE_CODE\"";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_tableRankedEmployee.addRow(new Object[model_tableRankedEmployee.getColumnCount()]);
                tableRankedEmployee.setValueAt(reset.getString("EmployeeTree_RANK_CODE"), rowCount, 0);
                tableRankedEmployee.setValueAt(reset.getString("EmployeeDesignationTree_EMPLOYEE_DESIGNATION_CODE"), rowCount, 1);
                tableRankedEmployee.setValueAt(reset.getString("EmployeeDesignation_EMPLOYEE_DESIGNATION_NAME"), rowCount, 2);
                tableRankedEmployee.setValueAt(reset.getString("EmployeeTree_EMPLOYEE_CODE"), rowCount, 3);
                tableRankedEmployee.setValueAt(reset.getString("Employees_FIRST_NAME"), rowCount, 4);
                tableRankedEmployee.setValueAt(reset.getString("Employees_CALL_NAME"), rowCount, 5);
                rowCount++;
            }
            reset.close();
            countItemsInSecondTable();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void RefreshDesignationRankTable() {
        try {
            int row = model_tableDesignationRank.getRowCount();
            for (int j = 0; j < row; j++) {
                model_tableDesignationRank.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    private void ButtonAddSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddSelectedActionPerformed
        selectedRowOfTableEmployee = tableEmployee.getSelectedRowCount();
        selectedRowOfTableDesignationRank = tableDesignationRank.getSelectedRowCount();
        if (selectedRowOfTableEmployee == 1 && selectedRowOfTableDesignationRank == 1) {
            FirstCheckBeforeAddToSecondTable();
        }
    }//GEN-LAST:event_ButtonAddSelectedActionPerformed

    private void FirstCheckBeforeAddToSecondTable() {
        selectedRowOfTableEmployee = tableEmployee.getSelectedRow();
        selectedRowOfTableDesignationRank = tableDesignationRank.getSelectedRow();
        empCode = tableEmployee.getValueAt(selectedRowOfTableEmployee, 0).toString();
        rankForGenerate = tableDesignationRank.getValueAt(selectedRowOfTableDesignationRank, 0).toString();
        Object[] CheckItemAlreadyAdded = CheckItemAlreadyAdded(empCode, rankForGenerate);        
        if ((Boolean) CheckItemAlreadyAdded[0]) {
            JOptionPane.showMessageDialog(this, "Employee is already added.", "Already added.", JOptionPane.OK_OPTION);
        } else {
            AddToSecondTable(empCode);
        }
    }

    protected Object[] CheckItemAlreadyAdded(String ItemFromFirstTable, String secondItemFromFirstTable) {
        int rowCount = model_tableRankedEmployee.getRowCount();
        Object[] data = new Object[2];
        data[0] = false;
        data[1] = -1;

        for (int i = 0; i < rowCount; i++) {
            String ItemAtSecondTable = model_tableRankedEmployee.getValueAt(i, 3).toString();
            String secondItemAtSecondTable = model_tableRankedEmployee.getValueAt(i, 0).toString();
            if (ItemFromFirstTable.equals(ItemAtSecondTable) && secondItemFromFirstTable.equals(secondItemAtSecondTable)) {
                data[0] = true;
                data[1] = i;
            }
        }
        return data;
    }

    private void AddToSecondTable(String empCode) {
        selectedRowOfTableEmployee = tableEmployee.getSelectedRow();
        selectedRowOfTableDesignationRank = tableDesignationRank.getSelectedRow();
        try {
            rankForGenerate = tableDesignationRank.getValueAt(selectedRowOfTableDesignationRank, 0).toString();
            designationCode = tableDesignationRank.getValueAt(selectedRowOfTableDesignationRank, 1).toString();
            designationName = tableDesignationRank.getValueAt(selectedRowOfTableDesignationRank, 2).toString();
            empFirstName = tableEmployee.getValueAt(selectedRowOfTableEmployee, 1).toString();
            empCallingName = tableEmployee.getValueAt(selectedRowOfTableEmployee, 3).toString();

            model_tableRankedEmployee.addRow(new Object[]{rankForGenerate, designationCode, designationName, empCode, empFirstName, empCallingName});
            countItemsInSecondTable();

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void countItemsInSecondTable() {
        TextNumberOfEmpRanked.setText(model_tableRankedEmployee.getRowCount() + "");
    }

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        allocateStudentsForEventGroup.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    private void ButtonRemoveSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRemoveSelectedActionPerformed
        selectedRowOfTableRankedEmployee = tableRankedEmployee.getSelectedRowCount();
        if (selectedRowOfTableRankedEmployee == 1) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure To remove this employee?", "Remove employee?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                int i = tableRankedEmployee.getSelectedRow();
                model_tableRankedEmployee.removeRow(i);
                countItemsInSecondTable();
            }
        } else if (selectedRowOfTableRankedEmployee != 1) {
            JOptionPane.showMessageDialog(this, "Employee is not selected.", "Not selected.", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_ButtonRemoveSelectedActionPerformed

    protected Object[] CheckIfStudentAlreadyAdded(String studntFromBtch) {
        int rowCount = model_tableRankedEmployee.getRowCount();
        Object[] data = new Object[2];
        data[0] = false;
        data[1] = -1;

        for (int i = 0; i < rowCount; i++) {
            String studentAllocateToEvent = model_tableRankedEmployee.getValueAt(i, 0).toString();
            if (studntFromBtch.equals(studentAllocateToEvent)) {
                data[0] = true;
                data[1] = i;
            }
        }
        return data;
    }

    private void CheckBeforeSave() {
        int RowCount = tableRankedEmployee.getRowCount();
        if (RowCount <= 0) {
            JOptionPane.showMessageDialog(this, "Employees are not available at table.", "No employees", JOptionPane.OK_OPTION);
        } else if (RowCount > 0) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure to allocate ranks to these employees?", "Save?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                deleteExsistsRecordsBeforeSave();
            }
        }
    }

    private void deleteExsistsRecordsBeforeSave() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "delete From EmployeeTree";
            stmt.execute(query);
            stmt.close();
            saveData();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void saveData() {
        try {
            rowCountOfTableRankedEmployee = tableRankedEmployee.getRowCount();
            java.sql.Statement stmtItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            for (int i = 0; i < rowCountOfTableRankedEmployee; i++) {
                rankForGenerate = tableRankedEmployee.getValueAt(i, 0).toString();
                empCode = tableRankedEmployee.getValueAt(i, 3).toString();

                String ItemInsertQuery = "INSERT INTO [EmployeeTree]\n"
                        + "           ([EMPLOYEE_CODE]\n"
                        + "           ,[RANK_CODE])\n"
                        + "     VALUES\n"
                        + "           ('" + empCode + "'\n"
                        + "           ,'" + rankForGenerate + "')";
                stmtItems.execute(ItemInsertQuery);
            }
            JOptionPane.showMessageDialog(this, "'" + menuName + "' is updated.");
            Refresh();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    public double roundTwoDecimals(double d) {
        DecimalFormat twoDForm = new DecimalFormat("#.##");
        return Double.valueOf(twoDForm.format(d));
    }

    public double roundThreeDecimals(double d) {
        DecimalFormat threeDForm = new DecimalFormat("#.###");
        return Double.valueOf(threeDForm.format(d));
    }

    private void Refresh() {
        int x = JOptionPane.showConfirmDialog(this, "Refresh '" + menuName + "' window?", "Refresh", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            comboDepartment.setEnabled(true);
            buttonView.setEnabled(true);
            comboDepartment.setSelectedItem(select);
            comboSubDepartment.setSelectedItem(select);

            TextNumberOfEmpRanked.setText("0");
            TextNumberOfEmpAtSubDepartment.setText("0");

            model_tableDesignationRank.setRowCount(0);

            try {
                int rowi = model_TableEmployee.getRowCount();
                for (int i = 0; i < rowi; i++) {
                    model_TableEmployee.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }

            try {
                int rowi = model_tableRankedEmployee.getRowCount();
                for (int i = 0; i < rowi; i++) {
                    model_tableRankedEmployee.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        }
    }

    private void exit() {
        if (allocateStudentsForEventGroup != null) {
            allocateStudentsForEventGroup = null;
        }
        this.dispose();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAddSelected;
    private javax.swing.JButton ButtonRemoveSelected;
    private javax.swing.JTextField TextNumberOfEmpAtSubDepartment;
    private javax.swing.JTextField TextNumberOfEmpRanked;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSave;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonView;
    private javax.swing.JComboBox comboDepartment;
    private javax.swing.JComboBox comboSubDepartment;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbl_accountType1;
    private javax.swing.JLabel lbl_subAccount;
    private javax.swing.JLabel lbl_subAccount1;
    private javax.swing.JLabel lbl_subAccount2;
    private javax.swing.JPanel panel1;
    private javax.swing.JTable tableDesignationRank;
    private javax.swing.JTable tableEmployee;
    private javax.swing.JTable tableRankedEmployee;
    // End of variables declaration//GEN-END:variables
}
