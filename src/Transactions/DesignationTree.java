/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Transactions;

import static MainFiles.IndexPage.designationTree;
import db.ConnectSql;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DigitalForceâ„¢
 */
public class DesignationTree extends javax.swing.JInternalFrame {

    private final String select = "--Select--";
    private final DefaultTableModel model_tableDesignationRank, model_tableDesignation;
    private final String spliter = "--";
    private final String menuName = "Designation tree";
    String departmentCode, subDepartmentCode, rankForGenerate, designationCode, designationName;
    int rank, rowCountOfTableDesignation, rowCountOfTableDesignationRank, selectedRowOfTableDesignation, selectedRowOfTableDesignationRank;

    public DesignationTree() {
        initComponents();

        buttonGroup1.add(rBtnCode);
        buttonGroup1.add(rBtnName);
        rBtnCode.setSelected(true);
        comboDepartment.requestFocus();
        model_tableDesignationRank = (DefaultTableModel) tableDesignationRank.getModel();
        model_tableDesignation = (DefaultTableModel) tableDesignation.getModel();
        panel1.setToolTipText("Press right mouse click to refresh.");
        this.setTitle(menuName);

        loadDepartmentsToCombo();
        LoadDesignations();
        LoadDesignationRanks();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        lbl_subAccount = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        rBtnCode = new javax.swing.JRadioButton();
        rBtnName = new javax.swing.JRadioButton();
        comboSubDepartment = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableDesignationRank = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        comboDepartment = new javax.swing.JComboBox();
        lbl_accountType1 = new javax.swing.JLabel();
        lbl_accountType4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableDesignation = new javax.swing.JTable();
        rankPicker = new com.toedter.components.JSpinField();
        buttonRemoveSelected = new javax.swing.JButton();
        buttonAddSelected = new javax.swing.JButton();
        textRankCode = new javax.swing.JTextField();
        lbl_accountType5 = new javax.swing.JLabel();
        buttonViewRankCode = new javax.swing.JButton();
        textSecondTableItemCount = new javax.swing.JTextField();

        setIconifiable(true);
        setPreferredSize(new java.awt.Dimension(901, 674));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnSave.setMnemonic('s');
        btnSave.setText("Save");
        btnSave.setActionCommand("Delete");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        panel1.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 610, 80, -1));

        btnRefresh.setMnemonic('d');
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        panel1.add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 610, 80, -1));

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText("Search designation by");
        panel1.add(lbl_subAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 140, 20));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnExitKeyPressed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 610, 80, -1));

        rBtnCode.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnCode);
        rBtnCode.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnCode.setText("Code");
        rBtnCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnCodeActionPerformed(evt);
            }
        });
        panel1.add(rBtnCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 30, 60, -1));

        rBtnName.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnName);
        rBtnName.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnName.setText("Name");
        rBtnName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnNameActionPerformed(evt);
            }
        });
        rBtnName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rBtnNameKeyPressed(evt);
            }
        });
        panel1.add(rBtnName, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 30, 60, -1));

        comboSubDepartment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        comboSubDepartment.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                comboSubDepartmentPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        comboSubDepartment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboSubDepartmentKeyPressed(evt);
            }
        });
        panel1.add(comboSubDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 120, 220, 20));

        tableDesignationRank.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rank code", "Rank level", "Designation code", "Designation name", "Department", "Sub department"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableDesignationRank.getTableHeader().setReorderingAllowed(false);
        tableDesignationRank.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableDesignationRankMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableDesignationRank);
        if (tableDesignationRank.getColumnModel().getColumnCount() > 0) {
            tableDesignationRank.getColumnModel().getColumn(1).setPreferredWidth(20);
        }

        panel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, 840, 220));

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        panel1.add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 30, 170, -1));
        panel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 590, 330, -1));

        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setText("Department *");
        panel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 80, 114, 20));

        comboDepartment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        comboDepartment.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                comboDepartmentPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        comboDepartment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboDepartmentKeyPressed(evt);
            }
        });
        panel1.add(comboDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 80, 220, 20));

        lbl_accountType1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType1.setText("Sub department *");
        panel1.add(lbl_accountType1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 120, 110, 20));

        lbl_accountType4.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType4.setText("Rank code");
        panel1.add(lbl_accountType4, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 200, 100, 20));

        tableDesignation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Designation code", "Designation name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableDesignation.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tableDesignation);

        panel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, 240));
        panel1.add(rankPicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 160, 50, -1));

        buttonRemoveSelected.setText("Remove selected");
        buttonRemoveSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveSelectedActionPerformed(evt);
            }
        });
        panel1.add(buttonRemoveSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 300, 120, -1));

        buttonAddSelected.setText("Add selected");
        buttonAddSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddSelectedActionPerformed(evt);
            }
        });
        panel1.add(buttonAddSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 300, 130, -1));

        textRankCode.setEditable(false);
        panel1.add(textRankCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 200, 220, -1));

        lbl_accountType5.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType5.setText("Rank");
        panel1.add(lbl_accountType5, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 160, 100, 20));

        buttonViewRankCode.setText("View rank code");
        buttonViewRankCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonViewRankCodeActionPerformed(evt);
            }
        });
        panel1.add(buttonViewRankCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 240, 130, -1));

        textSecondTableItemCount.setEditable(false);
        textSecondTableItemCount.setText("0");
        panel1.add(textSecondTableItemCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 590, 70, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 885, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadDepartmentsToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select DepartmentCode, DepartmentName From Departments order by DepartmentName";
            ResultSet rset = stmt.executeQuery(query);

            comboDepartment.removeAllItems();
            comboDepartment.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    comboDepartment.insertItemAt(rset.getString("DepartmentName") + "--" + rset.getString("DepartmentCode"), position); // 
                    position++;
                } while (rset.next());
            }
            comboDepartment.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", ERROR);
        }
    }

    private void loadSubDepartmentsToCombo() {
        try {
            String departmentCodeByArray[] = comboDepartment.getSelectedItem().toString().split(spliter);
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select SUB_DEPARTMENT_CODE, SUB_DEPARTMENT_NAME From SubDepartments WHERE DepartmentCode = '" + departmentCodeByArray[1] + "' order by SUB_DEPARTMENT_NAME";
            ResultSet rset = stmt.executeQuery(query);

            comboSubDepartment.removeAllItems();
            comboSubDepartment.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    comboSubDepartment.insertItemAt(rset.getString("SUB_DEPARTMENT_NAME") + "--" + rset.getString("SUB_DEPARTMENT_CODE"), position); // 
                    position++;
                } while (rset.next());
            }
            comboSubDepartment.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", ERROR);
        }
    }

    private void LoadDesignations() {
        try {
            RefreshDesignationTable();
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            query = "SELECT EMPLOYEE_DESIGNATION_CODE, EMPLOYEE_DESIGNATION_NAME FROM EmployeeDesignation";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_tableDesignation.addRow(new Object[model_tableDesignation.getColumnCount()]);
                tableDesignation.setValueAt(reset.getString("EMPLOYEE_DESIGNATION_CODE"), rowCount, 0);
                tableDesignation.setValueAt(reset.getString("EMPLOYEE_DESIGNATION_NAME"), rowCount, 1);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void LoadDesignationRanks() {
        try {
            RefreshDesignationRankTable();
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            query = "SELECT\n"
                    + "     EmployeeDesignationTree.\"RANK_CODE\" AS EmployeeDesignationTree_RANK_CODE,\n"
                    + "     EmployeeDesignationTree.\"RANK_LEVEL\" AS EmployeeDesignationTree_RANK_LEVEL,\n"
                    + "     EmployeeDesignationTree.\"EMPLOYEE_DESIGNATION_CODE\" AS EmployeeDesignationTree_EMPLOYEE_DESIGNATION_CODE,\n"
                    + "     EmployeeDesignationTree.\"SUB_DEPARTMENT_CODE\" AS EmployeeDesignationTree_SUB_DEPARTMENT_CODE,\n"
                    + "     EmployeeDesignation.\"EMPLOYEE_DESIGNATION_NAME\" AS EmployeeDesignation_EMPLOYEE_DESIGNATION_NAME,\n"
                    + "     SubDepartments.\"SUB_DEPARTMENT_NAME\" AS SubDepartments_SUB_DEPARTMENT_NAME,\n"
                    + "     Departments.\"DepartmentName\" AS Departments_DepartmentName\n"
                    + "FROM\n"
                    + "     \"dbo\".\"EmployeeDesignation\" EmployeeDesignation INNER JOIN \"dbo\".\"EmployeeDesignationTree\" EmployeeDesignationTree ON EmployeeDesignation.\"EMPLOYEE_DESIGNATION_CODE\" = EmployeeDesignationTree.\"EMPLOYEE_DESIGNATION_CODE\"\n"
                    + "     INNER JOIN \"dbo\".\"SubDepartments\" SubDepartments ON EmployeeDesignationTree.\"SUB_DEPARTMENT_CODE\" = SubDepartments.\"SUB_DEPARTMENT_CODE\"\n"
                    + "     INNER JOIN \"dbo\".\"Departments\" Departments ON SubDepartments.\"DepartmentCode\" = Departments.\"DepartmentCode\"";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_tableDesignationRank.addRow(new Object[model_tableDesignationRank.getColumnCount()]);
                tableDesignationRank.setValueAt(reset.getString("EmployeeDesignationTree_RANK_CODE"), rowCount, 0);
                tableDesignationRank.setValueAt(reset.getString("EmployeeDesignationTree_RANK_LEVEL"), rowCount, 1);
                tableDesignationRank.setValueAt(reset.getString("EmployeeDesignationTree_EMPLOYEE_DESIGNATION_CODE"), rowCount, 2);
                tableDesignationRank.setValueAt(reset.getString("EmployeeDesignation_EMPLOYEE_DESIGNATION_NAME"), rowCount, 3);
                tableDesignationRank.setValueAt(reset.getString("Departments_DepartmentName"), rowCount, 4);
                tableDesignationRank.setValueAt(reset.getString("SubDepartments_SUB_DEPARTMENT_NAME"), rowCount, 5);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        firstCheckBeforeSave();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void firstCheckBeforeSave() {
        rowCountOfTableDesignationRank = tableDesignationRank.getRowCount();
        if (rowCountOfTableDesignationRank != 0) {
            deleteExsistsRecordsBeforeSave();
        } else if (rowCountOfTableDesignationRank == 0) {

        }
    }

    private void deleteExsistsRecordsBeforeSave() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "delete From EmployeeDesignationTree";
            stmt.execute(query);
            stmt.close();
            saveData();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void saveData() {
        try {
            rowCountOfTableDesignationRank = tableDesignationRank.getRowCount();
            java.sql.Statement stmtItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            for (int i = 0; i < rowCountOfTableDesignationRank; i++) {
                rankForGenerate = tableDesignationRank.getValueAt(i, 0).toString();
                rank = Integer.parseInt(tableDesignationRank.getValueAt(i, 1).toString());
                designationCode = tableDesignationRank.getValueAt(i, 2).toString();
                String getSubDepartmentCode[] = tableDesignationRank.getValueAt(i, 0).toString().split(spliter);
                subDepartmentCode = getSubDepartmentCode[3];

                String ItemInsertQuery = "INSERT INTO [EmployeeDesignationTree]\n"
                        + "           ([RANK_CODE]\n"
                        + "           ,[RANK_LEVEL]\n"
                        + "           ,[EMPLOYEE_DESIGNATION_CODE]\n"
                        + "           ,[SUB_DEPARTMENT_CODE])\n"
                        + "     VALUES\n"
                        + "           ('" + rankForGenerate + "'\n"
                        + "           ,'" + rank + "'\n"
                        + "           ,'" + designationCode + "'\n"
                        + "           ,'" + subDepartmentCode + "')";
                stmtItems.execute(ItemInsertQuery);
            }
            JOptionPane.showMessageDialog(this, "'" + menuName + "' is updated.");
            Refresh();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        Refresh();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        exit();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnExitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            exit();
        }
    }//GEN-LAST:event_btnExitKeyPressed

    private void exit() {
        if (designationTree != null) {
            designationTree = null;
        }
        this.dispose();
    }

    private void rBtnCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnCodeActionPerformed
        if (rBtnCode.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnCodeActionPerformed

    private void rBtnNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnNameActionPerformed
        if (rBtnName.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnNameActionPerformed

    private void rBtnNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rBtnNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            rBtnCode.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            rBtnName.setSelected(true);
            btnSave.requestFocus();
        }
    }//GEN-LAST:event_rBtnNameKeyPressed

    private void comboSubDepartmentPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboSubDepartmentPopupMenuWillBecomeInvisible
        String text = comboSubDepartment.getSelectedItem().toString();
        if (!text.equals(select)) {
            rankPicker.requestFocus();
        }
    }//GEN-LAST:event_comboSubDepartmentPopupMenuWillBecomeInvisible

    private void comboSubDepartmentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboSubDepartmentKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String text = comboSubDepartment.getSelectedItem().toString();
            if (!text.equals(select)) {
                rankPicker.requestFocus();
            }
        }
    }//GEN-LAST:event_comboSubDepartmentKeyPressed

    private void tableDesignationRankMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableDesignationRankMouseClicked

    }//GEN-LAST:event_tableDesignationRankMouseClicked

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        if (rBtnCode.isSelected()) {
            SearchByCode(txtSearch.getText());
        } else if (rBtnName.isSelected()) {
            SearchByName(txtSearch.getText());
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void SearchByCode(String CategoryCode) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshDesignationTable();

            if (!CategoryCode.equals("")) {
                query = "SELECT EMPLOYEE_DESIGNATION_CODE, EMPLOYEE_DESIGNATION_NAME FROM EmployeeDesignation WHERE EMPLOYEE_DESIGNATION_CODE LIKE '" + CategoryCode + "%'";
            } else {
                query = "SELECT EMPLOYEE_DESIGNATION_CODE, EMPLOYEE_DESIGNATION_NAME FROM EmployeeDesignation WHERE EMPLOYEE_DESIGNATION_CODE LIKE '" + CategoryCode + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {

                model_tableDesignation.addRow(new Object[model_tableDesignation.getColumnCount()]);
                tableDesignation.setValueAt(reset.getString("EMPLOYEE_DESIGNATION_CODE"), rowCount, 0);
                tableDesignation.setValueAt(reset.getString("EMPLOYEE_DESIGNATION_NAME"), rowCount, 1);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchByName(String CategoryName) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshDesignationTable();

            if (!CategoryName.equals("")) {
                query = "SELECT EMPLOYEE_DESIGNATION_CODE, EMPLOYEE_DESIGNATION_NAME FROM EmployeeDesignation WHERE EMPLOYEE_DESIGNATION_CODE LIKE '%" + CategoryName + "%'";
            } else {
                query = "SELECT EMPLOYEE_DESIGNATION_CODE, EMPLOYEE_DESIGNATION_NAME FROM EmployeeDesignation WHERE EMPLOYEE_DESIGNATION_CODE LIKE '%" + CategoryName + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {

                model_tableDesignation.addRow(new Object[model_tableDesignation.getColumnCount()]);
                tableDesignation.setValueAt(reset.getString("EMPLOYEE_DESIGNATION_CODE"), rowCount, 0);
                tableDesignation.setValueAt(reset.getString("EMPLOYEE_DESIGNATION_NAME"), rowCount, 1);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void RefreshDesignationTable() {
        try {
            int row = model_tableDesignation.getRowCount();
            for (int j = 0; j < row; j++) {
                model_tableDesignation.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void RefreshDesignationRankTable() {
        try {
            int row = model_tableDesignationRank.getRowCount();
            for (int j = 0; j < row; j++) {
                model_tableDesignationRank.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void comboDepartmentPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboDepartmentPopupMenuWillBecomeInvisible
        String text = comboDepartment.getSelectedItem().toString();
        if (!text.equals(select)) {
            loadSubDepartmentsToCombo();
            btnSave.requestFocus();
        }
    }//GEN-LAST:event_comboDepartmentPopupMenuWillBecomeInvisible

    private void comboDepartmentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboDepartmentKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String text = comboDepartment.getSelectedItem().toString();
            if (!text.equals(select)) {
                loadSubDepartmentsToCombo();
                btnSave.requestFocus();
            }
        }
    }//GEN-LAST:event_comboDepartmentKeyPressed

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        designationTree.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    private void buttonViewRankCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonViewRankCodeActionPerformed
        departmentCode = comboDepartment.getSelectedItem().toString();
        subDepartmentCode = comboSubDepartment.getSelectedItem().toString();
        rowCountOfTableDesignation = tableDesignation.getSelectedRowCount();
        if (departmentCode.equals(spliter) || subDepartmentCode.equals(spliter) || rowCountOfTableDesignation == 0) {
            JOptionPane.showMessageDialog(this, "Department or sub department or designation is not selected.", "Not selected", JOptionPane.OK_OPTION);
            comboDepartment.requestFocus();
        } else if (!departmentCode.equals(spliter) && !subDepartmentCode.equals(spliter) && rowCountOfTableDesignation != 0) {
            String departmentCodeByArray[] = comboDepartment.getSelectedItem().toString().split(spliter);
            String subDepartmentCodeByArray[] = comboSubDepartment.getSelectedItem().toString().split(spliter);
            selectedRowOfTableDesignation = tableDesignation.getSelectedRow();
            rank = rankPicker.getValue();
            designationCode = tableDesignation.getValueAt(selectedRowOfTableDesignation, 0).toString();

            rankForGenerate = designationCode + spliter + rank + spliter + departmentCodeByArray[1] + spliter + subDepartmentCodeByArray[1];
            textRankCode.setText(rankForGenerate);
        }
    }//GEN-LAST:event_buttonViewRankCodeActionPerformed

    private void buttonAddSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddSelectedActionPerformed
        rankForGenerate = textRankCode.getText();
        if (!rankForGenerate.equals("")) {
            FirstCheckBeforeAddToSecondTable(rankForGenerate);
        }
    }//GEN-LAST:event_buttonAddSelectedActionPerformed

    private void buttonRemoveSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveSelectedActionPerformed
        selectedRowOfTableDesignationRank = tableDesignationRank.getSelectedRowCount();
        if (selectedRowOfTableDesignationRank == 1) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure To remove this?", "Remove rank?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                int i = tableDesignationRank.getSelectedRow();
                model_tableDesignationRank.removeRow(i);
                countItemsInSecondTable();
            }
        }else if (selectedRowOfTableDesignationRank != 1) {
            JOptionPane.showMessageDialog(this, "Rank code is not selected.", "Not selected.", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_buttonRemoveSelectedActionPerformed

    private void FirstCheckBeforeAddToSecondTable(String rankForGenerate) {
        Object[] CheckItemAlreadyAdded = CheckItemAlreadyAdded(rankForGenerate);
        if ((Boolean) CheckItemAlreadyAdded[0]) {
            JOptionPane.showMessageDialog(this, "Rank code is already added.", "Already added.", JOptionPane.OK_OPTION);
        } else {
            AddToSecondTable(rankForGenerate);
        }
    }

    private void AddToSecondTable(String rankForGenerate) {
        int getSelectedRowAtFirstTable = tableDesignation.getSelectedRow();
        try {
            designationCode = tableDesignation.getValueAt(getSelectedRowAtFirstTable, 0).toString();
            designationName = tableDesignation.getValueAt(getSelectedRowAtFirstTable, 1).toString();
            rank = rankPicker.getValue();
            String departmentNameByArray[] = comboDepartment.getSelectedItem().toString().split(spliter);
            String subDepartmentNameByArray[] = comboSubDepartment.getSelectedItem().toString().split(spliter);

            model_tableDesignationRank.addRow(new Object[]{rankForGenerate, rank, designationCode, designationName, departmentNameByArray[0], subDepartmentNameByArray[0]});
            countItemsInSecondTable();

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void countItemsInSecondTable() {
        textSecondTableItemCount.setText(model_tableDesignationRank.getRowCount() + "");
    }

    protected Object[] CheckItemAlreadyAdded(String ItemFromFirstTable) {
        int rowCount = model_tableDesignationRank.getRowCount();
        Object[] data = new Object[2];
        data[0] = false;
        data[1] = -1;

        for (int i = 0; i < rowCount; i++) {
            String ItemAtSecondTable = model_tableDesignationRank.getValueAt(i, 0).toString();
            if (ItemFromFirstTable.equals(ItemAtSecondTable)) {
                data[0] = true;
                data[1] = i;
            }
        }
        return data;
    }

    private void Refresh() {
        RefreshTableAndLoadAgain();
        LoadDesignations();
        loadDepartmentsToCombo();
        textRankCode.setText("");
        comboSubDepartment.setSelectedIndex(0);
        txtSearch.setText("");
        comboDepartment.setSelectedIndex(0);
        rankPicker.resetKeyboardActions();
        countItemsInSecondTable();
        LoadDesignationRanks();
    }

    private void RefreshTableAndLoadAgain() {
        try {
            model_tableDesignationRank.setRowCount(0);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton buttonAddSelected;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonRemoveSelected;
    private javax.swing.JButton buttonViewRankCode;
    private javax.swing.JComboBox comboDepartment;
    private javax.swing.JComboBox comboSubDepartment;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lbl_accountType1;
    private javax.swing.JLabel lbl_accountType4;
    private javax.swing.JLabel lbl_accountType5;
    private javax.swing.JLabel lbl_subAccount;
    private javax.swing.JPanel panel1;
    private javax.swing.JRadioButton rBtnCode;
    private javax.swing.JRadioButton rBtnName;
    private com.toedter.components.JSpinField rankPicker;
    private javax.swing.JTable tableDesignation;
    private javax.swing.JTable tableDesignationRank;
    private javax.swing.JTextField textRankCode;
    private javax.swing.JTextField textSecondTableItemCount;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
