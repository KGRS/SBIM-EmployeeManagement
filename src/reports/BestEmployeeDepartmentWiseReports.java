/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package reports;

import MainFiles.IndexPage;
import static MainFiles.IndexPage.departmentWiseEmployeeReports;
import db.ConnectSql;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;


public class BestEmployeeDepartmentWiseReports extends javax.swing.JInternalFrame {

    private final String select = "--Select--";
    private final String spliter = "--";
    private final String projectPath = System.getProperty("user.dir");
    private final String menuName = "Best employee - Department wise";

    /**
     * Creates new form StockReports
     */
    public BestEmployeeDepartmentWiseReports() {
        initComponents();
        Refresh();
        loadDepartmetns();
        //CheckBoxAllItems.setVisible(false);
        this.setTitle(menuName);
        ImageIcon DefaultBackGround = new ImageIcon(projectPath + "/pictures/InternalFrameIcons/Reports/StockReports.jpg");
        labelIcon.setIcon(DefaultBackGround);

        ImageIcon internalBackGround = new ImageIcon(projectPath + "/pictures/DefaultBackgrounds/InternalFrames/GrayGradient.png");
        backgroundLabel.setIcon(internalBackGround);                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        btnRefresh = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        ButtonPreview = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        comboBoxFixedJobs = new javax.swing.JComboBox();
        rBtnItemType = new javax.swing.JRadioButton();
        comboSubDepartment = new javax.swing.JComboBox();
        lbl_description3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        rBtnItemBestTime = new javax.swing.JRadioButton();
        rBtnItemBestUsage = new javax.swing.JRadioButton();
        labelIcon = new javax.swing.JLabel();
        lbl_description2 = new javax.swing.JLabel();
        CalendarButtonStartDate = new org.sourceforge.jcalendarbutton.JCalendarButton();
        lbl_description1 = new javax.swing.JLabel();
        CalendarButtonEndDate = new org.sourceforge.jcalendarbutton.JCalendarButton();
        backgroundLabel = new javax.swing.JLabel();

        setIconifiable(true);
        setPreferredSize(new java.awt.Dimension(1061, 542));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnRefresh.setMnemonic('d');
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        panel1.add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 460, 80, -1));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnExitKeyPressed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 460, 80, -1));

        ButtonPreview.setText("Preview");
        ButtonPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonPreviewActionPerformed(evt);
            }
        });
        panel1.add(ButtonPreview, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 460, 80, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        comboBoxFixedJobs.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        comboBoxFixedJobs.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                comboBoxFixedJobsPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        comboBoxFixedJobs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboBoxFixedJobsKeyPressed(evt);
            }
        });
        jPanel1.add(comboBoxFixedJobs, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 120, 280, 20));

        rBtnItemType.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnItemType);
        rBtnItemType.setForeground(new java.awt.Color(102, 102, 102));
        rBtnItemType.setText("Sub department");
        rBtnItemType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnItemTypeActionPerformed(evt);
            }
        });
        jPanel1.add(rBtnItemType, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, 120, -1));

        comboSubDepartment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        comboSubDepartment.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                comboSubDepartmentPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        comboSubDepartment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboSubDepartmentKeyPressed(evt);
            }
        });
        jPanel1.add(comboSubDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 280, 20));

        lbl_description3.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description3.setText("Fixed job/ Process");
        jPanel1.add(lbl_description3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 120, 100, 20));

        panel1.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 490, 330));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        jPanel2.setPreferredSize(new java.awt.Dimension(480, 380));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        rBtnItemBestTime.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(rBtnItemBestTime);
        rBtnItemBestTime.setForeground(new java.awt.Color(102, 102, 102));
        rBtnItemBestTime.setText("Best employee for time management - Sub department and fixed job wise");
        rBtnItemBestTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnItemBestTimeActionPerformed(evt);
            }
        });
        jPanel2.add(rBtnItemBestTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 70, 390, -1));

        rBtnItemBestUsage.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(rBtnItemBestUsage);
        rBtnItemBestUsage.setForeground(new java.awt.Color(102, 102, 102));
        rBtnItemBestUsage.setText("Best employee for raw item usage - Sub department and fixed job wise");
        jPanel2.add(rBtnItemBestUsage, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 30, 380, -1));
        jPanel2.add(labelIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 440, 290));

        panel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 20, 480, 430));

        lbl_description2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description2.setText("Start date");
        panel1.add(lbl_description2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, 70, 20));

        CalendarButtonStartDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                CalendarButtonStartDatePropertyChange(evt);
            }
        });
        panel1.add(CalendarButtonStartDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 120, 20));

        lbl_description1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description1.setText("End date");
        panel1.add(lbl_description1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 50, 70, 20));

        CalendarButtonEndDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                CalendarButtonEndDatePropertyChange(evt);
            }
        });
        panel1.add(CalendarButtonEndDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 50, 120, 20));
        panel1.add(backgroundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 1020, 490));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1045, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadFixJobsToCombo() {
        try {
            String departmentCodeByArray[] = comboSubDepartment.getSelectedItem().toString().split(spliter);
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select JOB_FIXED_NAME, JOB_FIXED_ID, PRODUCT_LEVEL_ITEM_CODE From JobFixed WHERE SUB_DEPARTMENT_CODE = '" + departmentCodeByArray[1] + "' order by JOB_FIXED_NAME";
            ResultSet rset = stmt.executeQuery(query);

            comboBoxFixedJobs.removeAllItems();
            comboBoxFixedJobs.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    comboBoxFixedJobs.insertItemAt(rset.getString("JOB_FIXED_NAME") + "--" + rset.getString("JOB_FIXED_ID") + "--" + rset.getString("PRODUCT_LEVEL_ITEM_CODE"), position); // 
                    position++;
                } while (rset.next());
            }
            comboBoxFixedJobs.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", ERROR);
        }
    }

    private void loadDepartmetns() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select SUB_DEPARTMENT_CODE, SUB_DEPARTMENT_NAME From subdepartments order by SUB_DEPARTMENT_NAME";
            ResultSet rset = stmt.executeQuery(query);

            comboSubDepartment.removeAllItems();
            comboSubDepartment.insertItemAt(select, 0);
            int position = 1;
            if (rset.next()) {
                do {
                    comboSubDepartment.insertItemAt(rset.getString("SUB_DEPARTMENT_NAME") + spliter + rset.getString("SUB_DEPARTMENT_CODE"), position); // 
                    position++;
                } while (rset.next());
            }
            comboSubDepartment.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        Refresh();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void Refresh() {
        comboBoxFixedJobs.setSelectedItem(select);
        comboSubDepartment.setSelectedItem(select);

//        CheckBoxAllItems.setSelected(true);
//        CheckBoxAllItems.setEnabled(true);
//        rBtnItemType.setEnabled(false);

//        comboBoxFixedJobs.setEnabled(false);
//        comboSubDepartment.setEnabled(false);

        buttonGroup1.clearSelection();
    }

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        exit();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnExitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            exit();
        }
    }//GEN-LAST:event_btnExitKeyPressed

    private void exit() {
        if (departmentWiseEmployeeReports != null) {
            departmentWiseEmployeeReports = null;
        }
        this.dispose();
    }

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    private void comboBoxFixedJobsPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboBoxFixedJobsPopupMenuWillBecomeInvisible
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxFixedJobsPopupMenuWillBecomeInvisible

    private void comboBoxFixedJobsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboBoxFixedJobsKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxFixedJobsKeyPressed

    private void rBtnItemBestTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnItemBestTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rBtnItemBestTimeActionPerformed

    private void rBtnItemTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnItemTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rBtnItemTypeActionPerformed

    private void comboSubDepartmentPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboSubDepartmentPopupMenuWillBecomeInvisible
        if (!comboSubDepartment.getSelectedItem().equals(select)) {
            loadFixJobsToCombo();
        }
    }//GEN-LAST:event_comboSubDepartmentPopupMenuWillBecomeInvisible

    private void comboSubDepartmentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboSubDepartmentKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboSubDepartmentKeyPressed

    private void RefreshCombo() {
        comboBoxFixedJobs.setSelectedItem(select);
        comboSubDepartment.setSelectedItem(select);
    }

    private void ButtonPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPreviewActionPerformed
//        if (!rBtnItemOrderName.isSelected() || !rBtnItemOrderCode.isSelected() || !rBtnItemMinium.isSelected() || !rBtnItemMaximum.isSelected() || !rBtnItemZeroQtyName.isSelected() || !rBtnItemZeroQtyCode.isSelected() || !rBtnItemNotVisible.isSelected()) {
//            JOptionPane.showMessageDialog(this, "please select a report.", "Not seleted", JOptionPane.OK_OPTION);
//        } else 
        if (rBtnItemBestUsage.isSelected() || rBtnItemBestTime.isSelected()) {
            PrintStockReport();
        }
    }//GEN-LAST:event_ButtonPreviewActionPerformed

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        departmentWiseEmployeeReports.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    private void CalendarButtonStartDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_CalendarButtonStartDatePropertyChange
        if (evt.getNewValue() instanceof Date) {
            Date RecievedDate = (Date) evt.getNewValue();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            CalendarButtonStartDate.setText(format.format(RecievedDate));
            CalendarButtonEndDate.requestFocus();
            buttonGroup1.clearSelection();
        }
    }//GEN-LAST:event_CalendarButtonStartDatePropertyChange

    private void CalendarButtonEndDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_CalendarButtonEndDatePropertyChange
        if (evt.getNewValue() instanceof Date) {
            Date RecievedDate = (Date) evt.getNewValue();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            CalendarButtonEndDate.setText(format.format(RecievedDate));
            buttonGroup1.clearSelection();
        }
    }//GEN-LAST:event_CalendarButtonEndDatePropertyChange

    private void PrintStockReport() {
        Connection sqlcon = ConnectSql.conn;
        String StartDate = CalendarButtonStartDate.getText();
        String EndDate = CalendarButtonEndDate.getText();
//        String subDepartmentID[] = comboSubDepartment.getSelectedItem().toString().split(spliter);
        String JOB_FIXED_ID[] = comboBoxFixedJobs.getSelectedItem().toString().split(spliter);
        String passedJOB_FIXED_ID = JOB_FIXED_ID[1]+spliter+JOB_FIXED_ID[2];
        String PathToLogo = projectPath + "/pictures/Logo/ClientLogo.jpg";
        if (rBtnItemBestUsage.isSelected()) {
            try {
                Map map = new HashMap();
                map.put("User", IndexPage.user.trim());
                map.put("Logo", PathToLogo);
                map.put("Code", passedJOB_FIXED_ID);
                map.put("Start_Date", StartDate);
                map.put("End_Date", EndDate);

                String Report = "Best employee for raw item management - Department wise.jrxml";
                JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Stock Reports/All items/" + Report);
                JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
                JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
                JasperViewer.viewReport(jasperprint, false);
            } catch (JRException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        } else if (rBtnItemBestTime.isSelected()) {
            try {
                Map map = new HashMap();
                map.put("User", IndexPage.user.trim());
                map.put("Logo", PathToLogo);
                map.put("Code", passedJOB_FIXED_ID);
//                map.put("Code2", subDepartmentID[1]);
                map.put("Start_Date", StartDate);
                map.put("End_Date", EndDate);

                String Report = "Best employee for time management - Department wise.jrxml";
                JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Stock Reports/All items/" + Report);
                JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
                JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
                JasperViewer.viewReport(jasperprint, false);
            } catch (JRException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonPreview;
    private org.sourceforge.jcalendarbutton.JCalendarButton CalendarButtonEndDate;
    private org.sourceforge.jcalendarbutton.JCalendarButton CalendarButtonStartDate;
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnRefresh;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox comboBoxFixedJobs;
    private javax.swing.JComboBox comboSubDepartment;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel labelIcon;
    private javax.swing.JLabel lbl_description1;
    private javax.swing.JLabel lbl_description2;
    private javax.swing.JLabel lbl_description3;
    private javax.swing.JPanel panel1;
    private javax.swing.JRadioButton rBtnItemBestTime;
    private javax.swing.JRadioButton rBtnItemBestUsage;
    private javax.swing.JRadioButton rBtnItemType;
    // End of variables declaration//GEN-END:variables
}
